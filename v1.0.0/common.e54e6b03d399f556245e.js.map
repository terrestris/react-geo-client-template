{"version":3,"file":"common.e54e6b03d399f556245e.js","mappings":"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","sources":["webpack://react-geo-client-template/./src/components/BasicLayerTree/index.tsx","webpack://react-geo-client-template/./src/components/BasicMapComponent/index.tsx","webpack://react-geo-client-template/./src/components/BasicNominatimSearch/index.tsx","webpack://react-geo-client-template/./src/hooks/useAppDispatch.ts","webpack://react-geo-client-template/./src/hooks/useAppSelector.ts","webpack://react-geo-client-template/./src/store/drawer/index.ts","webpack://react-geo-client-template/./src/components/SideDrawer/index.tsx","webpack://react-geo-client-template/./src/components/ToggleDrawerButton/index.tsx","webpack://react-geo-client-template/./src/App.tsx","webpack://react-geo-client-template/./src/i18n/index.ts","webpack://react-geo-client-template/./src/i18n/translations.ts","webpack://react-geo-client-template/./src/store/store.ts","webpack://react-geo-client-template/./src/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport OlLayerBase from 'ol/layer/Base';\nimport OlLayerVector from 'ol/layer/Vector';\n\nimport useMap from '@terrestris/react-geo/dist/Hook/useMap';\nimport LayerTree, {\n  LayerTreeProps\n} from '@terrestris/react-geo/dist/LayerTree/LayerTree';\n\nexport const BasicLayerTree: React.FC<Partial<LayerTreeProps>> = (\n  props\n): JSX.Element => {\n  const map = useMap();\n\n  if (!map) {\n    return <></>;\n  }\n\n  return (\n    <LayerTree\n      map={map}\n      filterFunction={(layer: OlLayerBase) => !(layer instanceof OlLayerVector)}\n      {...props}\n    />\n  );\n};\n\nexport default BasicLayerTree;\n","import React from 'react';\n\nimport useMap from '@terrestris/react-geo/dist/Hook/useMap';\nimport MapComponent, {\n  MapComponentProps\n} from '@terrestris/react-geo/dist/Map/MapComponent/MapComponent';\n\nexport const BasicMapComponent: React.FC<Partial<MapComponentProps>> = (props): JSX.Element => {\n  const map = useMap();\n\n  if (!map) {\n    return <></>;\n  }\n\n  return (\n    <MapComponent\n      map={map}\n      {...props}\n    />\n  );\n};\n\nexport default BasicMapComponent;\n","import React from 'react';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nimport NominatimSearch, {\n  NominatimSearchProps\n} from '@terrestris/react-geo/dist/Field/NominatimSearch/NominatimSearch';\nimport useMap from '@terrestris/react-geo/dist/Hook/useMap';\n\nimport './index.less';\n\nexport const BasicNominatimSearch: React.FC<Partial<NominatimSearchProps>> = (props): JSX.Element => {\n  const map = useMap();\n  const {\n    t\n  } = useTranslation();\n\n  if (!map) {\n    return <></>;\n  }\n\n  return (\n    <NominatimSearch\n      map={map}\n      countryCodes={''}\n      allowClear={true}\n      nominatimBaseUrl={'https://nominatim.terrestris.de/search.php?'}\n      placeholder={t('Nominatim.placeholder')}\n      {...props}\n    />\n  );\n};\n\nexport default BasicNominatimSearch;\n","import {\n  useDispatch\n} from 'react-redux';\n\nimport type {\n  AppDispatch\n} from '../store/store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import {\n  TypedUseSelectorHook,\n  useSelector\n} from 'react-redux';\n\nimport type {\n  RootState\n} from '../store/store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {\n  createSlice\n} from '@reduxjs/toolkit';\n\ninterface DrawerState {\n  visible: boolean;\n}\n\nconst initialState: DrawerState = {\n  visible: false\n};\n\nexport const slice = createSlice({\n  name: 'drawer',\n  initialState,\n  reducers: {\n    toggleVisibility: (state) => {\n      state.visible = !state.visible;\n    }\n  }\n});\n\nexport const {\n  toggleVisibility\n} = slice.actions;\n\nexport default slice.reducer;\n","import React from 'react';\n\nimport {\n  Drawer\n} from 'antd';\nimport {\n  DrawerProps\n} from 'antd/lib/drawer';\n\nimport {\n  useTranslation\n} from 'react-i18next';\n\nconst BasicLayerTree = React.lazy(() => import('../BasicLayerTree'));\nimport {\n  useAppDispatch\n} from '../../hooks/useAppDispatch';\nimport {\n  useAppSelector\n} from '../../hooks/useAppSelector';\nimport {\n  toggleVisibility\n} from '../../store/drawer';\n\nimport './index.less';\n\nexport const SideDrawer: React.FC<Partial<DrawerProps>> = (props): JSX.Element => {\n  const dispatch = useAppDispatch();\n  const visible = useAppSelector((state) => state.drawer.visible);\n  const {\n    t\n  } = useTranslation();\n\n  const toggleDrawer = () => {\n    dispatch(toggleVisibility());\n  };\n\n  return (\n    <Drawer\n      title={t('Drawer.title')}\n      placement=\"right\"\n      onClose={toggleDrawer}\n      visible={visible}\n      mask={false}\n      {...props}\n    >\n      <React.Suspense\n        fallback={null}\n      >\n        <BasicLayerTree />\n      </React.Suspense>\n    </Drawer>\n  );\n};\n\nexport default SideDrawer;\n","import React from 'react';\n\nimport {\n  faBars\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\n\nimport SimpleButton, {\n  SimpleButtonProps\n} from '@terrestris/react-geo/dist/Button/SimpleButton/SimpleButton';\n\nimport {\n  useAppDispatch\n} from '../../hooks/useAppDispatch';\nimport {\n  toggleVisibility\n} from '../../store/drawer';\n\nimport './index.less';\n\nexport const BasicNominatimSearch: React.FC<Partial<SimpleButtonProps>> = (\n  props\n): JSX.Element => {\n  const dispatch = useAppDispatch();\n\n  const toggleDrawer = () => {\n    dispatch(toggleVisibility());\n  };\n\n  return (\n    <SimpleButton\n      className=\"toggle-drawer-button\"\n      onClick={toggleDrawer}\n      icon={\n        <FontAwesomeIcon\n          icon={faBars}\n        />\n      }\n    />\n  );\n};\n\nexport default BasicNominatimSearch;\n","import React from 'react';\n\nimport BasicMapComponent from './components/BasicMapComponent';\nimport BasicNominatimSearch from './components/BasicNominatimSearch';\nimport SideDrawer from './components/SideDrawer';\nimport ToggleDrawerButton from './components/ToggleDrawerButton';\n\nimport './App.less';\n\nexport const App: React.FC = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <BasicMapComponent />\n      <BasicNominatimSearch />\n      <ToggleDrawerButton />\n      <SideDrawer />\n    </div>\n  );\n};\n\nexport default App;\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport {\n  initReactI18next\n} from 'react-i18next';\n\nimport resources from './translations';\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    fallbackLng: 'en',\n    debug: false,\n    interpolation: {\n      escapeValue: false\n    },\n    supportedLngs: ['de', 'en']\n  });\n\nexport default i18n;\n","export default {\n  de: {\n    translation: {\n      Nominatim: {\n        placeholder: 'Ortsname, Stra√üenname, Stadtteilname, POI usw.'\n      },\n      Drawer: {\n        title: 'Themen'\n      }\n    }\n  },\n  en: {\n    translation: {\n      Nominatim: {\n        placeholder: 'Place name, street name, district name, POI, etc.'\n      },\n      Drawer: {\n        title: 'Layers'\n      }\n    }\n  }\n};\n","import {\n  configureStore\n} from '@reduxjs/toolkit';\n\nimport drawer from './drawer';\n\nexport const store = configureStore({\n  reducer: {\n    drawer\n  }\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\n\nimport {\n  Alert\n} from 'antd';\n\nimport ConfigProvider from 'antd/lib/config-provider';\nimport deDE from 'antd/lib/locale/de_DE';\nimport enGB from 'antd/lib/locale/en_GB';\n\nimport {\n  defaults as OlControlDefaults\n} from 'ol/control';\nimport OlLayerGroup from 'ol/layer/Group';\nimport OlLayerTile from 'ol/layer/Tile';\nimport OlMap from 'ol/Map';\nimport {\n  fromLonLat\n} from 'ol/proj';\nimport OlSourceOsm from 'ol/source/OSM';\nimport OlSourceTileWMS from 'ol/source/TileWMS';\nimport OlView from 'ol/View';\nimport {\n  render\n} from 'react-dom';\nimport {\n  Provider\n} from 'react-redux';\n\nimport MapContext from '@terrestris/react-geo/dist/Context/MapContext/MapContext';\n\nimport App from './App';\nimport i18n from './i18n';\nimport {\n  store\n} from './store/store';\n\nimport './index.less';\n\nconst getConfigLang = (lang: string) => {\n  switch (lang) {\n    case 'en':\n      return enGB;\n    case 'de':\n      return deDE;\n    default:\n      return enGB;\n  }\n};\n\nconst setupMap = async () => {\n  const osmLayer = new OlLayerTile({\n    source: new OlSourceOsm()\n  });\n  osmLayer.set('name', 'OpenStreetMap');\n\n  const temperatureDayLayer = new OlLayerTile({\n    opacity: 0.5,\n    source: new OlSourceTileWMS({\n      url: 'https://neo.gsfc.nasa.gov/wms/wms',\n      projection: 'CRS:84',\n      params: {\n        LAYERS: 'MOD_LSTD_CLIM_M'\n      }\n    })\n  });\n  temperatureDayLayer.set('name', 'Average Land Surface Temperature (Day)');\n\n  const temperatureNightLayer = new OlLayerTile({\n    opacity: 0.5,\n    visible: false,\n    source: new OlSourceTileWMS({\n      url: 'https://neo.gsfc.nasa.gov/wms/wms',\n      projection: 'CRS:84',\n      params: {\n        LAYERS: 'MOD_LSTN_CLIM_M'\n      }\n    })\n  });\n  temperatureNightLayer.set('name', 'Average Land Surface Temperature (Night)');\n\n  const eoLayerGroup = new OlLayerGroup({\n    layers: [temperatureDayLayer, temperatureNightLayer]\n  });\n  eoLayerGroup.set('name', 'NASA Earth Observations');\n\n  const backgroundLayerGroup = new OlLayerGroup({\n    layers: [osmLayer]\n  });\n  backgroundLayerGroup.set('name', 'Background');\n\n  const center = fromLonLat([0, 40], 'EPSG:3857');\n\n  return new OlMap({\n    view: new OlView({\n      center: center,\n      zoom: 0\n    }),\n    layers: [backgroundLayerGroup, eoLayerGroup],\n    controls: OlControlDefaults({\n      zoom: false\n    })\n  });\n};\n\nconst renderApp = async () => {\n  try {\n    const map = await setupMap();\n\n    render(\n      <React.StrictMode>\n        <React.Suspense fallback={<span></span>}>\n          <ConfigProvider locale={getConfigLang(i18n.language)}>\n            <Provider store={store}>\n              <MapContext.Provider value={map}>\n                <App />\n              </MapContext.Provider>\n            </Provider>\n          </ConfigProvider>\n        </React.Suspense>\n      </React.StrictMode>,\n      document.getElementById('app')\n    );\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n\n    render(\n      <React.StrictMode>\n        <Alert\n          className=\"error-boundary\"\n          message=\"Error while loading the application\"\n          description=\"An unexpected error occured while loading the application. Please try to reload the page.\"\n          type=\"error\"\n          showIcon\n        />\n      </React.StrictMode>,\n      document.getElementById('app')\n    );\n  }\n};\n\nrenderApp();\n"],"names":["BasicLayerTree","props","map","useMap","filterFunction","layer","OlLayerVector","MapComponent","t","useTranslation","NominatimSearch","countryCodes","allowClear","nominatimBaseUrl","placeholder","useAppDispatch","useDispatch","useAppSelector","useSelector","slice","createSlice","name","initialState","visible","reducers","toggleVisibility","state","actions","React","dispatch","drawer","title","placement","onClose","mask","fallback","SimpleButton","className","onClick","icon","faBars","ToggleDrawerButton","i18n","LanguageDetector","use","initReactI18next","init","resources","de","translation","Nominatim","Drawer","en","fallbackLng","debug","interpolation","escapeValue","supportedLngs","store","configureStore","reducer","getConfigLang","lang","enGB","deDE","async","osmLayer","OlLayerTile","source","OlSourceOsm","set","temperatureDayLayer","opacity","OlSourceTileWMS","url","projection","params","LAYERS","temperatureNightLayer","eoLayerGroup","OlLayerGroup","layers","backgroundLayerGroup","center","fromLonLat","OlMap","view","OlView","zoom","controls","OlControlDefaults","setupMap","render","locale","language","MapContext","value","document","getElementById","error","console","message","description","type","showIcon","renderApp"],"sourceRoot":""}